CREATE DATABASE IF NOT EXISTS music_app;
USE music_app;
 
-- Create USERS table
CREATE TABLE USERS (
    User_ID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(50) NOT NULL UNIQUE,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    Profile_Picture VARCHAR(255),
    Subscription_Type ENUM('Free', 'Premium', 'Family') DEFAULT 'Free'
);

-- Create ARTISTS table
CREATE TABLE ARTISTS (
    Artist_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL
);

-- Create SONGS table
CREATE TABLE SONGS (
    Song_ID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(100) NOT NULL,
    Album VARCHAR(100),
    Genre VARCHAR(50),
    Release_Date DATE,
    Duration INT NOT NULL COMMENT 'Duration in seconds',
    File_Location VARCHAR(255) NOT NULL
);

-- Create PLAYLISTS table
CREATE TABLE PLAYLISTS (
    Playlist_ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Created_By INT NOT NULL,
    Creation_Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Created_By) REFERENCES USERS(User_ID) ON DELETE CASCADE
);

-- Create COMMENTS table
CREATE TABLE COMMENTS (
    Comment_ID INT PRIMARY KEY AUTO_INCREMENT,
    Comment_Text TEXT NOT NULL,
    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    User_ID INT NOT NULL,
    Song_ID INT NOT NULL,
    FOREIGN KEY (User_ID) REFERENCES USERS(User_ID) ON DELETE CASCADE,
    FOREIGN KEY (Song_ID) REFERENCES SONGS(Song_ID) ON DELETE CASCADE
);

-- Create RATINGS table
CREATE TABLE RATINGS (
    Rating_ID INT PRIMARY KEY AUTO_INCREMENT,
    Rating_Value DECIMAL(2,1) NOT NULL CHECK (Rating_Value BETWEEN 0 AND 5),
    User_ID INT NOT NULL,
    Song_ID INT NOT NULL,
    FOREIGN KEY (User_ID) REFERENCES USERS(User_ID) ON DELETE CASCADE,
    FOREIGN KEY (Song_ID) REFERENCES SONGS(Song_ID) ON DELETE CASCADE,
    UNIQUE (User_ID, Song_ID)
);

-- Create RECOMMENDATIONS table
CREATE TABLE RECOMMENDATIONS (
    Recommendation_ID INT PRIMARY KEY AUTO_INCREMENT,
    User_ID INT NOT NULL,
    Song_ID INT NOT NULL,
    Recommendation_Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_ID) REFERENCES USERS(User_ID) ON DELETE CASCADE,
    FOREIGN KEY (Song_ID) REFERENCES SONGS(Song_ID) ON DELETE CASCADE
);

-- Create USER_LOGS table
CREATE TABLE USER_LOGS (
    Log_ID INT PRIMARY KEY AUTO_INCREMENT,
    User_ID INT NOT NULL,
    Activity VARCHAR(255) NOT NULL,
    Log_Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_ID) REFERENCES USERS(User_ID) ON DELETE CASCADE
);

-- Create SONG_ARTISTS junction table
CREATE TABLE SONG_ARTISTS (
    Song_ID INT NOT NULL,
    Artist_ID INT NOT NULL,
    PRIMARY KEY (Song_ID, Artist_ID),
    FOREIGN KEY (Song_ID) REFERENCES SONGS(Song_ID) ON DELETE CASCADE,
    FOREIGN KEY (Artist_ID) REFERENCES ARTISTS(Artist_ID) ON DELETE CASCADE
);

-- Create PLAYLIST_SONGS junction table
CREATE TABLE PLAYLIST_SONGS (
    Playlist_ID INT NOT NULL,
    Song_ID INT NOT NULL,
    Added_Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (Playlist_ID, Song_ID),
    FOREIGN KEY (Playlist_ID) REFERENCES PLAYLISTS(Playlist_ID) ON DELETE CASCADE,
    FOREIGN KEY (Song_ID) REFERENCES SONGS(Song_ID) ON DELETE CASCADE
);

CREATE TABLE trending (
    id INT AUTO_INCREMENT PRIMARY KEY,
    song_id INT NOT NULL,
    play_count INT DEFAULT 0,
    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (song_id) REFERENCES songs(id)
);